diff --git a/command.c b/command.v13.c
index 4536897..8527a56 100644
--- a/command.c
+++ b/command.v13.c
@@ -29,12 +29,14 @@
 #include <glib/gi18n.h>
 #include <gio/gio.h>
 #include <gtk/gtk.h>
+#include <gdk-pixbuf/gdk-pixbuf.h>
 
 #include <mate-panel-applet.h>
 #include <mate-panel-applet-gsettings.h>
 #include "ma-command.h"
 
 /* Applet constants */
+#define ICON_SIZE      16
 #define APPLET_ICON    "utilities-terminal"
 #define ERROR_OUTPUT   "#"
 
@@ -42,6 +44,7 @@
 #define COMMAND_SCHEMA "org.mate.panel.applet.command"
 #define COMMAND_KEY    "command"
 #define INTERVAL_KEY   "interval"
+#define ICON_NAME_KEY  "icon"
 #define SHOW_ICON_KEY  "show-icon"
 #define WIDTH_KEY      "width"
 
@@ -65,8 +68,10 @@ typedef struct
     MaCommand         *command;
     GCancellable      *cancellable;
     gboolean           running;
+    GdkPixbuf         *buf;
 
     gchar             *cmdline;
+    gchar             *filename;
     gint               interval;
     gint               width;
 
@@ -79,6 +84,7 @@ static gboolean command_execute (CommandApplet *command_applet);
 static gboolean command_text_changed (GtkWidget *widget, GdkEvent  *event, gpointer user_data);
 static void interval_value_changed (GtkSpinButton *spin_button, gpointer user_data);
 static void width_value_changed (GtkSpinButton *spin_button, gpointer user_data);
+static void icon_name_changed (GtkFileChooser *chooser, gpointer user_data);
 static void command_async_ready_callback (GObject *source_object, GAsyncResult *res, gpointer user_data);
 static gboolean timeout_callback (CommandApplet *command_applet);
 
@@ -111,10 +117,34 @@ command_applet_destroy (MatePanelApplet *applet_widget, CommandApplet *command_a
     {
         g_object_unref (command_applet->command);
     }
-
+ 
+    if (command_applet->filename != NULL)
+    {
+        g_free (command_applet->filename);
+        command_applet->filename = NULL;
+    }
+    
     g_object_unref (command_applet->settings);
 }
 
+static char* get_image_path(CommandApplet *command_applet)     
+{     
+   char *path;     
+    
+    if (g_path_is_absolute (command_applet->filename))     
+        path = g_strdup (command_applet->filename);     
+    else
+    {
+        // set APPLET_ICON as default icon if filename is not set
+        const gchar *icon_file = gtk_icon_info_get_filename (gtk_icon_theme_lookup_icon (gtk_icon_theme_get_default(), /* get icon theme */
+                                                                                         APPLET_ICON, /* choose icon name */
+                                                                                         ICON_SIZE, /* icon size */
+                                                                                         0)); /* icon flag */
+        path = g_strdup (icon_file);     
+    }
+    return path;     
+}     
+
 /* Show the about dialog */
 static void
 command_about_callback (GtkAction *action, CommandApplet *command_applet)
@@ -154,6 +184,30 @@ command_text_changed (GtkWidget *widget, GdkEvent  *event, gpointer user_data)
     return TRUE;
 }
 
+static void
+icon_name_changed (GtkFileChooser *chooser, gpointer user_data)
+{
+    gchar *name;
+    GdkPixbuf *buf;
+    CommandApplet *command_applet;
+
+    command_applet = (CommandApplet*) user_data;
+    name = gtk_file_chooser_get_filename (GTK_FILE_CHOOSER(chooser));
+    
+    if (command_applet->filename == name)
+        return;
+
+    g_settings_set_string (command_applet->settings, ICON_NAME_KEY, name);
+
+    buf = gdk_pixbuf_new_from_file_at_size (command_applet->filename, ICON_SIZE, ICON_SIZE, NULL);
+    command_applet->buf = buf;
+
+    gtk_image_set_from_pixbuf(GTK_IMAGE(command_applet->image), command_applet->buf);
+
+    g_object_unref (buf);
+    g_free (name);
+}
+
 static void interval_value_changed (GtkSpinButton *spin_button, gpointer user_data)
 {
     gint value;
@@ -188,14 +242,24 @@ command_settings_callback (GtkAction *action, CommandApplet *command_applet)
 {
     GtkDialog *dialog;
     GtkBuilder *builder;
+    GtkWidget *image_chooser;
+    char *path;
 
     builder = gtk_builder_new_from_resource ("/org/mate/mate-applets/command/command-preferences.ui");
+    image_chooser = GTK_WIDGET (gtk_builder_get_object (builder, "icon_entry"));
+
+    path = get_image_path (command_applet);
+    gtk_file_chooser_set_filename (GTK_FILE_CHOOSER (image_chooser),
+                       path);
+    g_free (path);
+
 
     dialog = GET_DIALOG ("preferences_dialog");
 
     g_settings_bind (command_applet->settings, COMMAND_KEY, GET_WIDGET ("command_entry"), "text", G_SETTINGS_BIND_GET_NO_CHANGES);
     g_settings_bind (command_applet->settings, INTERVAL_KEY, GET_WIDGET ("interval_spinbutton"), "value", G_SETTINGS_BIND_GET_NO_CHANGES);
     g_settings_bind (command_applet->settings, WIDTH_KEY, GET_WIDGET ("width_spinbutton"), "value", G_SETTINGS_BIND_GET_NO_CHANGES);
+    g_settings_bind (command_applet->settings, ICON_NAME_KEY, GET_WIDGET ("icon_entry"), "name", G_SETTINGS_BIND_GET_NO_CHANGES);
     g_settings_bind (command_applet->settings, SHOW_ICON_KEY, GET_WIDGET ("show_icon_check"), "active", G_SETTINGS_BIND_DEFAULT);
 
     /* signals */
@@ -203,13 +267,16 @@ command_settings_callback (GtkAction *action, CommandApplet *command_applet)
                                       "on_command_entry_focus_out_event", G_CALLBACK (command_text_changed),
                                       "on_interval_spinbutton_value_changed", G_CALLBACK (interval_value_changed),
                                       "on_width_spinbutton_value_changed", G_CALLBACK (width_value_changed),
+                                      "on_icon_entry_selection_changed", G_CALLBACK (icon_name_changed),
                                       NULL);
+
     gtk_builder_connect_signals (builder, command_applet);
 
     g_signal_connect (dialog, "response",
                       G_CALLBACK (gtk_widget_destroy),
                       dialog);
 
+    
     g_object_unref (builder);
 
     gtk_widget_show_all (GTK_WIDGET (dialog));
@@ -242,6 +309,19 @@ settings_command_changed (GSettings *settings, gchar *key, CommandApplet *comman
     command_execute (command_applet);
 }
 
+static void
+settings_icon_changed (GSettings *settings, gchar *key, CommandApplet *command_applet)
+{
+    gchar *filename;
+
+    filename = g_settings_get_string (command_applet->settings, ICON_NAME_KEY);
+    
+    if (command_applet->filename == filename)
+        return;
+
+    command_applet->filename = filename;
+}
+
 static void
 settings_width_changed (GSettings *settings, gchar *key, CommandApplet *command_applet)
 {
@@ -417,21 +497,23 @@ command_applet_fill (MatePanelApplet* applet)
     command_applet->applet = applet;
     command_applet->settings = mate_panel_applet_settings_new (applet, COMMAND_SCHEMA);
 
+    command_applet->filename = g_settings_get_string (command_applet->settings, ICON_NAME_KEY);
     command_applet->interval = g_settings_get_int (command_applet->settings, INTERVAL_KEY);
     command_applet->cmdline = g_settings_get_string (command_applet->settings, COMMAND_KEY);
     command_applet->width = g_settings_get_int (command_applet->settings, WIDTH_KEY);
     command_applet->command = ma_command_new(command_applet->cmdline, NULL);
     command_applet->cancellable = g_cancellable_new ();
 
+    command_applet->buf = gdk_pixbuf_new_from_file_at_size (command_applet->filename, ICON_SIZE, ICON_SIZE, NULL);
     command_applet->box = GTK_BOX (gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0));
-    command_applet->image = GTK_IMAGE (gtk_image_new_from_icon_name (APPLET_ICON, GTK_ICON_SIZE_LARGE_TOOLBAR));
+    command_applet->image = GTK_IMAGE (gtk_image_new_from_pixbuf (command_applet->buf));
     command_applet->label = GTK_LABEL (gtk_label_new (ERROR_OUTPUT));
     command_applet->timeout_id = 0;
 
     /* we add the Gtk label into the applet */
     gtk_box_pack_start (command_applet->box,
                         GTK_WIDGET (command_applet->image),
-                        TRUE, TRUE, 0);
+                        TRUE, TRUE, 8);
     gtk_box_pack_start (command_applet->box,
                         GTK_WIDGET (command_applet->label),
                         TRUE, TRUE, 0);
@@ -458,6 +540,10 @@ command_applet_fill (MatePanelApplet* applet)
                       G_CALLBACK (settings_width_changed),
                       command_applet);
 
+    g_signal_connect (command_applet->settings, "changed::" ICON_NAME_KEY,
+                      G_CALLBACK (settings_icon_changed),
+                      command_applet);
+
     g_settings_bind (command_applet->settings,
                      SHOW_ICON_KEY,
                      command_applet->image,
