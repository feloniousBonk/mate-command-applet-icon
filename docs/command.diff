diff --git a/command.c b/command.v22.c
index 2412d12..7321521 100644
--- a/command.c
+++ b/command.v22.c
@@ -42,6 +42,8 @@
 #define COMMAND_SCHEMA "org.mate.panel.applet.command"
 #define COMMAND_KEY    "command"
 #define INTERVAL_KEY   "interval"
+#define ICON_SIZE_KEY  "icon-size"
+#define ICON_NAME_KEY  "icon"
 #define SHOW_ICON_KEY  "show-icon"
 #define WIDTH_KEY      "width"
 
@@ -62,13 +64,16 @@ typedef struct
     GtkLabel          *label;
     GtkImage          *image;
     GtkBox            *box;
+    GdkPixbuf         *buf;
     MaCommand         *command;
     GCancellable      *cancellable;
-    gboolean           running;
 
     gchar             *cmdline;
-    gint               interval;
+    gchar             *filename;
+    gint               size;
     gint               width;
+    gint               interval;
+    gboolean           running;
 
     guint              timeout_id;
 } CommandApplet;
@@ -79,8 +84,13 @@ static gboolean command_execute (CommandApplet *command_applet);
 static gboolean command_text_changed (GtkWidget *widget, GdkEvent  *event, gpointer user_data);
 static void interval_value_changed (GtkSpinButton *spin_button, gpointer user_data);
 static void width_value_changed (GtkSpinButton *spin_button, gpointer user_data);
+static void icon_size_changed (GtkSpinButton *spin_button, gpointer user_data);
+static void icon_name_changed (GtkFileChooser *chooser, gpointer user_data);
 static void command_async_ready_callback (GObject *source_object, GAsyncResult *res, gpointer user_data);
 static gboolean timeout_callback (CommandApplet *command_applet);
+static gboolean load_icon_image(CommandApplet *command_applet);
+static char* get_default_icon (CommandApplet *command_applet);
+static char* get_icon_path(CommandApplet *command_applet);
 
 static const GtkActionEntry applet_menu_actions [] = {
     { "Preferences", "document-properties", N_("_Preferences"), NULL, NULL, G_CALLBACK (command_settings_callback) },
@@ -133,6 +143,54 @@ command_about_callback (GtkAction *action, CommandApplet *command_applet)
                           NULL );
 }
 
+static char* get_default_icon (CommandApplet *command_applet)
+{
+    gchar *default_icon;
+
+    const gchar *icon_file = gtk_icon_info_get_filename (gtk_icon_theme_lookup_icon (gtk_icon_theme_get_default(), /* get icon theme */
+                                                                                            APPLET_ICON, /* choose icon name */
+                                                                                            command_applet->size, /* icon size */
+                                                                                            0)); /* icon flag */
+    default_icon = g_strdup (icon_file);
+    return default_icon;
+}
+
+static char* get_icon_path(CommandApplet *command_applet)
+{
+   gchar *path;
+
+    if (g_path_is_absolute (command_applet->filename))
+        path = g_strdup (command_applet->filename);
+    else
+        path = get_default_icon (command_applet);
+    return path;
+}
+
+static gboolean load_icon_image(CommandApplet *command_applet)
+{
+    GError    *error = NULL;
+    char      *path;
+
+    path = get_icon_path (command_applet);
+
+    if (command_applet->buf)
+        g_object_unref (command_applet->buf);
+    command_applet->buf = gdk_pixbuf_new_from_file_at_size (path, command_applet->size, command_applet->size, &error);
+
+    if (error) {
+        g_warning ("Cannot load '%s': %s", path, error->message);
+        g_error_free (error);
+        g_free (path);
+        return FALSE;
+    }
+
+    gtk_image_set_from_pixbuf(GTK_IMAGE(command_applet->image), command_applet->buf);
+
+    g_free (path);
+
+    return TRUE;
+}
+
 static gboolean
 command_text_changed (GtkWidget *widget, GdkEvent  *event, gpointer user_data)
 {
@@ -154,6 +212,49 @@ command_text_changed (GtkWidget *widget, GdkEvent  *event, gpointer user_data)
     return TRUE;
 }
 
+static void icon_name_changed (GtkFileChooser *chooser, gpointer user_data)
+{
+    gchar *file;
+    gchar *path_gsettings;
+    CommandApplet *command_applet;
+
+    command_applet = (CommandApplet*) user_data;
+    file = gtk_file_chooser_get_filename (GTK_FILE_CHOOSER(chooser));
+
+    if (!file || !file[0]) {
+        g_free (file);
+        return;
+    }
+
+    path_gsettings = get_icon_path (command_applet);
+
+    if (!strcmp (file, path_gsettings)) {
+        g_free (file);
+        g_free (path_gsettings);
+        return;
+    }
+    g_free (path_gsettings);
+
+    g_settings_set_string (command_applet->settings, ICON_NAME_KEY, file);
+
+    g_free (file);
+}
+
+static void icon_size_changed (GtkSpinButton *spin_button, gpointer user_data)
+{
+    gint value;
+    CommandApplet *command_applet;
+
+    command_applet = (CommandApplet*) user_data;
+    value = gtk_spin_button_get_value_as_int (spin_button);
+    if (command_applet->size == value) {
+        return;
+    }
+
+    g_settings_set_int (command_applet->settings, ICON_SIZE_KEY, value);
+
+}
+
 static void interval_value_changed (GtkSpinButton *spin_button, gpointer user_data)
 {
     gint value;
@@ -188,14 +289,35 @@ command_settings_callback (GtkAction *action, CommandApplet *command_applet)
 {
     GtkDialog *dialog;
     GtkBuilder *builder;
+    GtkFileFilter *filter;
+    GtkFileChooser *icon_chooser;
+    gchar *path;
 
     builder = gtk_builder_new_from_resource ("/org/mate/mate-applets/command/command-preferences.ui");
+    icon_chooser = GTK_FILE_CHOOSER (gtk_builder_get_object (builder, "icon_entry"));
+
+    /* set action to filechooser */
+    gtk_file_chooser_set_action (icon_chooser, GTK_FILE_CHOOSER_ACTION_OPEN);
+
+    /* set filter to filechooser to only show image files */
+    filter = gtk_file_filter_new ();
+    gtk_file_filter_set_name (filter, _("Images"));
+    gtk_file_filter_add_pixbuf_formats (filter);
+    gtk_file_chooser_add_filter (icon_chooser, filter);
+    gtk_file_chooser_set_filter (icon_chooser, filter);
+
+    /* set current filename path to filechooser */
+    path = get_icon_path (command_applet);
+    gtk_file_chooser_set_filename (icon_chooser, path);
+    g_free (path);
 
     dialog = GET_DIALOG ("preferences_dialog");
 
     g_settings_bind (command_applet->settings, COMMAND_KEY, GET_WIDGET ("command_entry"), "text", G_SETTINGS_BIND_GET_NO_CHANGES);
     g_settings_bind (command_applet->settings, INTERVAL_KEY, GET_WIDGET ("interval_spinbutton"), "value", G_SETTINGS_BIND_GET_NO_CHANGES);
     g_settings_bind (command_applet->settings, WIDTH_KEY, GET_WIDGET ("width_spinbutton"), "value", G_SETTINGS_BIND_GET_NO_CHANGES);
+    g_settings_bind (command_applet->settings, ICON_SIZE_KEY, GET_WIDGET ("icon_spinbutton"), "value", G_SETTINGS_BIND_GET_NO_CHANGES);
+    g_settings_bind (command_applet->settings, ICON_NAME_KEY, GET_WIDGET ("icon_entry"), "title", G_SETTINGS_BIND_DEFAULT);
     g_settings_bind (command_applet->settings, SHOW_ICON_KEY, GET_WIDGET ("show_icon_check"), "active", G_SETTINGS_BIND_DEFAULT);
 
     /* signals */
@@ -203,7 +325,10 @@ command_settings_callback (GtkAction *action, CommandApplet *command_applet)
                                       "on_command_entry_focus_out_event", G_CALLBACK (command_text_changed),
                                       "on_interval_spinbutton_value_changed", G_CALLBACK (interval_value_changed),
                                       "on_width_spinbutton_value_changed", G_CALLBACK (width_value_changed),
+                                      "on_icon_spinbutton_value_changed", G_CALLBACK (icon_size_changed),
+                                      "on_icon_entry_selection_changed", G_CALLBACK (icon_name_changed),
                                       NULL);
+
     gtk_builder_connect_signals (builder, command_applet);
 
     g_signal_connect (dialog, "response",
@@ -242,6 +367,43 @@ settings_command_changed (GSettings *settings, gchar *key, CommandApplet *comman
     command_execute (command_applet);
 }
 
+static void
+settings_icon_changed (GSettings *settings, gchar *key, CommandApplet *command_applet)
+{
+    gchar *name;
+
+    name = g_settings_get_string (command_applet->settings, ICON_NAME_KEY);
+
+    if (!name || *name == '\0' || (command_applet->filename && !strcmp (command_applet->filename, name))) {
+        g_free(name);
+        return;
+    }
+
+    if (command_applet->filename)
+        g_free (command_applet->filename);
+    command_applet->filename = g_strdup (name);
+
+    if (name)
+      g_free (name);
+
+    load_icon_image (command_applet);
+}
+
+static void
+settings_size_changed (GSettings *settings, gchar *key, CommandApplet *command_applet)
+{
+    gint size;
+
+    size = g_settings_get_int (command_applet->settings, ICON_SIZE_KEY);
+
+    if (command_applet->size == size) {
+        return;
+    }
+    command_applet->size = size;
+
+    load_icon_image (command_applet);
+}
+
 static void
 settings_width_changed (GSettings *settings, gchar *key, CommandApplet *command_applet)
 {
@@ -419,19 +581,22 @@ command_applet_fill (MatePanelApplet* applet)
 
     command_applet->interval = g_settings_get_int (command_applet->settings, INTERVAL_KEY);
     command_applet->cmdline = g_settings_get_string (command_applet->settings, COMMAND_KEY);
+    command_applet->filename = g_settings_get_string (command_applet->settings, ICON_NAME_KEY);
+    command_applet->size = g_settings_get_int (command_applet->settings, ICON_SIZE_KEY);
     command_applet->width = g_settings_get_int (command_applet->settings, WIDTH_KEY);
     command_applet->command = ma_command_new(command_applet->cmdline, NULL);
     command_applet->cancellable = g_cancellable_new ();
 
+    command_applet->buf = gdk_pixbuf_new_from_file_at_size (command_applet->filename, command_applet->size, command_applet->size, NULL);
     command_applet->box = GTK_BOX (gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0));
-    command_applet->image = GTK_IMAGE (gtk_image_new_from_icon_name (APPLET_ICON, GTK_ICON_SIZE_LARGE_TOOLBAR));
+    command_applet->image = GTK_IMAGE (gtk_image_new_from_pixbuf (command_applet->buf));
     command_applet->label = GTK_LABEL (gtk_label_new (ERROR_OUTPUT));
     command_applet->timeout_id = 0;
 
     /* we add the Gtk label into the applet */
     gtk_box_pack_start (command_applet->box,
                         GTK_WIDGET (command_applet->image),
-                        TRUE, TRUE, 0);
+                        TRUE, TRUE, 8);
     gtk_box_pack_start (command_applet->box,
                         GTK_WIDGET (command_applet->label),
                         TRUE, TRUE, 0);
@@ -458,6 +623,14 @@ command_applet_fill (MatePanelApplet* applet)
                       G_CALLBACK (settings_width_changed),
                       command_applet);
 
+    g_signal_connect (command_applet->settings, "changed::" ICON_SIZE_KEY,
+                      G_CALLBACK (settings_size_changed),
+                      command_applet);
+
+    g_signal_connect (command_applet->settings, "changed::" ICON_NAME_KEY,
+                      G_CALLBACK (settings_icon_changed),
+                      command_applet);
+
     g_settings_bind (command_applet->settings,
                      SHOW_ICON_KEY,
                      command_applet->image,
@@ -471,6 +644,8 @@ command_applet_fill (MatePanelApplet* applet)
                                   G_N_ELEMENTS (applet_menu_actions), command_applet);
     mate_panel_applet_setup_menu (command_applet->applet, ui, action_group);
 
+    /* first icon execution */
+    load_icon_image (command_applet);
     /* first command execution */
     command_execute (command_applet);
     return TRUE;
